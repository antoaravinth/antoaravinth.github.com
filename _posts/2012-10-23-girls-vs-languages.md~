---
layout: post
title: "girls"
description: ""
category: 
tags: []
---
{% include JB/setup %}

Hello all :D I hope you people are doing great. This post will speak about java and its related technologies, why I love them and why I hate them. 

If any one come and ask me why I love to code in Groovy. I would say first say these : "Groovy is a dynamic language, it can be called as a fully oop language
, it can be used as functional language, it has several nice features of what Javascript has, we can do operator overloading, we can write down dsl's, and blah
blah blah blah. . . . ". The list goes on and on. But I can understand your feeling, that is too techy and its boring you. 


Look lets take another approach and say you why Groovy or other dynamic programming languages like Scala rocks ( in the world of Jvm ). Before I do that, you need to be sure why I dislike Java in some cases. Lets look at that first.

#####Note: The upcoming text is meant to be fun. When I said its "fun", it is "fun". In no way I'm hurting or teasing any girls out there. 


Java is more are like the character of "Jessi" in VTV film.


![vtv][1] 
[1]: http://i.imgur.com/JUJzq.jpg


The moment you introduced to java you will be lost by its beauty. Really I did had the feeling when I saw the first java program like this :

    class HelloWorldApp {
        public static void main(String[] args) {
            System.out.println("Hello World!");
        }
    }



I was like "wow nice and cool hello world program". After days passed away I loved Java deeply. I loved to write code in java and we were like : 

![trisha][2]
[2]: http://i.imgur.com/xWBZv.jpg


But there was a problem with Java and also with Jessi. The problem is :

#####We need to satifsy "them" for no reason.

What I mean by this is, lets take a example, lets say I write a code in java like this:

    System.out.println("Hello World!")

Note that I have written the code without `;`. And Java is not **satifised**. You need to add `;` for no reason. That is there is no usefulness for us by adding it.
Do you think so?

If we give this code to Java/Jessi they wont accept it : 

![trisha3][3]
[3]: http://i.imgur.com/vfFeQ.jpg



The problem was not with `;` colon alone. But with many other things. Just rewind some steps and look at the hello world program and think about it.

The code for doing it is here: 

    class HelloWorldApp {
        public static void main(String[] args) {
            System.out.println("Hello World!");
        }
    }

Ok that doesn't seems to be very hard at all. But lets stop for a moment and rethink what I said before. I want to write out hello world program, which essentially prints out the text `Hello World!`. But look at the java code for a moment. My aim is to print, just print, then why do I need a `class`? why do I need a command line args( `String[] args` )? Why do I need those `public` keywords? Ah! Thats too more java is excepting from us. 

Our job is to print , so it should have been something like this in Java : 

    println("Hello World")

but it isn't. The problem was with the design of the Java language. But eventually the code : 

    println("Hello World")

Is a valid Groovy code. This will do what exactly what Java did before. Groovy is some one like Naan Ee's heroine : 

![samantha][4]
[4]: http://i.imgur.com/otCBe.jpg

Pretty new when considered to Java and more beautiful. Groovy has some nice feature's like : 

    
    //no need to know the data type
    def string = "string"

    //closures
    def closures = {  }

The coolest thing in Groovy is that you no need to say the data type. Groovy can *infer* for you. That is in the above code `string` is of type `String`. But we haven't specified it in our code. Groovy can find that for us. The anology is same as like with Java. The closures in Groovy are very powerful in nature and they are similar to the delegate concept of C#.

To be more precise, what you do if you want to do open a file in Java? You should do something like this:


    new BufferedReader(new FileReader("file"));

You have opened up the files but you should close it after using it. Usually people will wrap the above code with `try-finally` block. In `finally`  block they call `close()`. But what happen if in `finally` block the code throws an exception? You need to catch them too. Oops! More things to remember ah? 

Lets look how Samantha helps us. The code for opening and printing each line in groovy is :

    new File('myfile.txt').eachLine { println it }

Thats it. The above code will open the file named `myfile.txt` and close them properly once it has been finished processing. The `{`,`}` block are called as closures which is taking care of opening and closing our file properly. 

The reason why I choose Samantha pic of Naan Ee has two reasons. 1. To make guys stick to the post and 2. Was to . . . . .

As in case of Naan Ee, being we as housefly we are just saying the compiler to do useful things but asking our compiler or samantha to do the rest hard work.

What I mean by this is, when I do : 

    new File('myfile.txt').eachLine { println it }

This looks really great in the eyes of devoloper. But note how much work Groovy is needed to do in order to open the files and close them? 

#####No lunch is called as "Free lunch"

If Groovy is doing what *it* is said to do and what is not said to do ( in our example it is taking care of opening and closing the files, even though we didn't asked him to do ) then there is a issue. The issue is performance. Groovy code will run slower than Java code ( keep this in mind, I will come back later to this point ). Performance problem is someone like :

![villan][5]
[5]: http://i.imgur.com/Kyfqq.jpg

We need to takle him in order to make Samantha/Groovy works faster. The introduction of Java 7 has a new type of bytecode called as `invokedynamice`.
Let us consider a simple java code:

    String anto = "someone"
    anto.length()

Nothing fancy here. The `anto` is so type of `String` which is known by the compiler. With this known information when I do `anto.length()` Java know's I'm calling the `length()` method of `String` class. But consider the case in Groovy:

    def anto = "someone"
    anto.size()

    anto = 123
    //after some code
    anto.callSomeMethod() 

Ok with your naked eye can you say what is the type of `anto` in the above code? The types are changing. Can you be sure that `anto` can be only `String` and `Integer` in this case? `callSomeMethod()` will be belonging to which class ( tricky eh ) ? Compiler can't predict them in before hand so it need to something to make the code run faster. There is some one who need to help out Samantha. 

That someone is : 

![ee][6]
[6]: http://i.imgur.com/4fi1m.jpg

#####Intro to InvokeDynmaic:

